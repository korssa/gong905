import { NextRequest, NextResponse } from 'next/server';
import { list } from '@vercel/blob';

export async function GET(
  request: NextRequest,
  { params }: { params: { type: string } }
) {
  try {
    const { type } = params;
    
    // 유효한 갤러리 타입인지 확인
    if (!['a', 'b', 'c'].includes(type)) {
      return NextResponse.json(
        { success: false, error: 'Invalid gallery type' },
        { status: 400 }
      );
    }

    console.log(`📁 갤러리 ${type} 데이터 로드 시작...`);

    // 해당 갤러리 폴더의 파일들 조회
    const { blobs } = await list({
      prefix: `gallery-${type}/`,
      limit: 1000
    });

    // meta.json 파일 찾기
    const metaFile = blobs.find(blob => blob.pathname === `gallery-${type}/meta.json`);
    
    if (metaFile) {
      // meta.json에서 데이터 로드
      const response = await fetch(metaFile.url);
      if (response.ok) {
        const data = await response.json();
        console.log(`✅ 갤러리 ${type} 데이터 로드 완료: ${data.items?.length || 0}개 항목`);
        
        return NextResponse.json({
          success: true,
          data: data.items || [],
          count: data.items?.length || 0,
          type,
          lastUpdated: data.lastUpdated
        });
      }
    }

    // meta.json이 없으면 이미지 파일들로부터 자동 생성
    const imageFiles = blobs.filter(blob => 
      blob.pathname.match(/\.(jpg|jpeg|png|gif|webp)$/i)
    );

    const items = imageFiles.map((file, index) => ({
      id: `gallery-${type}-${index + 1}`,
      imageUrl: file.url,
      title: `이미지 ${index + 1}`,
      author: '공명',
      likes: 0,
      views: 0,
      uploadDate: new Date().toISOString().split('T')[0],
      tags: []
    }));

    console.log(`✅ 갤러리 ${type} 자동 생성 완료: ${items.length}개 항목`);

    return NextResponse.json({
      success: true,
      data: items,
      count: items.length,
      type,
      autoGenerated: true
    });

  } catch (error) {
    console.error(`❌ 갤러리 ${type} 데이터 로드 실패:`, error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error',
        data: []
      },
      { status: 500 }
    );
  }
}
